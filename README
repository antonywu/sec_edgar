sec_edgar is a gem that can download financial statements from the SEC/Edgar 
database, parse them, perform valuations, and write the results to CSV

The following example retrieves all of Google's annual reports (10k's).  It
then reformulates them to highlight the business's operating fundamentals.
Based on the reformulated statements, it performs a two-stage valuation, 
based on 5 years of forecast data and then a long-term growth rate.

        require 'sec_edgar'
        
        # look up all of GOOG's 10-k's
        ticker = 'GOOG'
        rept_type = '10-K'
        download_path = "/tmp/"
        edgar = SecEdgar::Edgar.new
        
        reports = edgar.lookup_reports(ticker)
        reports.keep_if{ |r| r[:type] == rept_type }
        reports.sort! {|a,b| a[:date] <=> b[:date] }
        
        files = edgar.get_reports(reports, download_path)
        
        # get the first one.  (later ones will be merged into this)
        ten_k = SecEdgar::AnnualReport.new 
        ten_k.parse(files.shift)
        summary = ten_k.get_summary
        ten_k = nil
        
        # get all the later 10-K's and merge them into this one
        while !files.empty?
          ten_k2 = SecEdgar::AnnualReport.new 
          ten_k2.log = Logger.new('sec_edgar.log')
          ten_k2.log.level = Logger::DEBUG
          ten_k2.parse(files.shift)
          summary2 = ten_k2.get_summary
        
          summary.merge(summary2)
        end
        
        # provide some forecast data and do a valuation
        forecast_data = 
          [ { :revenue_growth => 0.15,
              :sales_pm       => 0.17,
              :fi_over_nfa    => 0.01,
              :ato            => 1.50 },
            { :revenue_growth => 0.15,
              :sales_pm       => 0.17,
              :fi_over_nfa    => 0.01,
              :ato            => 1.50 },
            { :revenue_growth => 0.15,
              :sales_pm       => 0.17,
              :fi_over_nfa    => 0.01,
              :ato            => 1.50 },
            { :revenue_growth => 0.15,
              :sales_pm       => 0.17,
              :fi_over_nfa    => 0.01,
              :ato            => 1.50 },
            { :revenue_growth => 0.04,
              :sales_pm       => 0.17,
              :fi_over_nfa    => 0.01,
              :ato            => 1.50 } ]
        
        rho_f = 1.11
        thousands_of_shares = 322250
        
        v_cse_share_0 = summary.sf2_valuation(forecast_data, rho_f, thousands_of_shares)
        puts "value per share = #{v_cse_share_0}"
        
        summary.to_csv("summary.csv")
